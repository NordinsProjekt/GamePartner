@using Application.MtGCard_Service.DTO
@using MtGCard_Service
<h2>CardPager</h2>
@if (_rep != null)
{
    <div>
        <div class="d-flex flex-row flex-wrap">
            @foreach (var card in _rep.GetCards(index,Jump).ToList())
            {
                    <div class="p-2 bd-highlight" @onclick="(() => ClickedCard(card.Id))">
                        <h3>@card.Name</h3>
                        <img src="@card.ImageUrl" />
                    </div>
            }
        </div>
        <div class="d-flex flex-row">
            @{
                int j = 1;
            }
        @for (int i = 0; i <= _rep.Count/Jump; i += 1)
        {
            int x = i*Jump;
            <div style="padding: 5px;" @onclick="(() => UpdatePager(x))"><p><u>@j</u></p></div>
            j++;
        }
        </div>
    </div>
}

@code {
    [Parameter]
    public MtGCardBufferService? _rep { get; set; }
    [Parameter]
    public int Jump { get; set; } = 5;
    [Parameter]
    public string? SearchText { get; set; }
    [Parameter]
    public EventCallback<string> onClickedCard { get; set; }

    private int index { get; set; } = 5;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (SearchText != null && _rep != null)
            await _rep.PopulateCardList(SearchText);
    }
    public void UpdatePager(int num) => index = num+Jump;
    private async Task ClickedCard(string id) => await onClickedCard.InvokeAsync(id);
}
