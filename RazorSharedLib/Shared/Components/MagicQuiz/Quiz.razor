@using MtGDomain.Enums
@using MtGDomain.Extensions
@using MtGDomain.Models
@using RazorSharedLib.Api
@using MtGSetRecordDTO = RazorSharedLib.Api.MtGSetRecordDTO
@using MtGDomain.DTO
@using RazorSharedLib.Extensions
@using RazorSharedLib.States.Quiz

<h3>Quiz</h3>
@if (State.SelectedQuizType is not null && State.SelectedSet is not null && State.QuizReady)
{
        <ScoreBoard Score="State.QuizScore"/>

    switch (State.SelectedQuizType)
    {
        case QuizType.Type:
            <div id="QuizWindowType">
                <h2>Vilken typ har detta kortet? @(State.QuizIndex + 1) / @State.NumOfCards</h2>
                <p>Cardname: @State.CurrentCard.Name</p>
                <div class="button-container">
                    <button type="button" id="Enchantment" @onclick='(() => State.CheckAnswer("Enchantment"))'>Enchantment</button>
                    <button type="button" id="Artefact" @onclick='(() => State.CheckAnswer("Artifact"))'>Artifact</button>
                    <button type="button" id="Creature" @onclick='(() => State.CheckAnswer("Creature"))'>Creature</button>
                    <button type="button" id="Instant" @onclick='(() => State.CheckAnswer("Instant"))'>Instant</button>
                    <button type="button" id="Sorcery" @onclick='(() => State.CheckAnswer("Sorcery"))'>Sorcery</button>
                    <button type="button" id="Land" @onclick='(() => State.CheckAnswer("Land"))'>Land</button>
                    <button type="button" id="Battle" @onclick='(() => State.CheckAnswer("Battle"))'>Battle</button>
                    <button type="button" id="Planeswalker" @onclick='(() => State.CheckAnswer("Planeswalker"))'>Planeswalker</button>
                </div>

            </div>
            break;

        case QuizType.CMC:
            <div id="QuizWindowCMC">
                <h2>Hur mycket CMC har detta kortet? @(State.QuizIndex + 1) / @State.NumOfCards</h2>
                <p>Cardname: @State.CurrentCard.Name</p>
                <EditForm Model="@State.Model">
                    <InputNumber id="inputCmc" @bind-Value="@State.Model.CmcValue" />
                    <button type="button" id="CmcCheck" @onclick="State.CheckAnswerCmC">Send</button>
                </EditForm>
            </div>
            break;

        case QuizType.Color:
            <div id="QuizWindowColor">
                <h2>Vilken/Vilka färger har kortet? @(State.QuizIndex + 1) / @State.NumOfCards</h2>
                <p>Cardname: @State.CurrentCard.Name</p>
                <EditForm Model="@State.Model">
                    <!-- Blue Checkbox -->
                    <input type="checkbox" id="blue" @bind-value="@State.Model.Color.Blue" class="checkbox-input" />
                    <label for="blue" class="checkbox-label">
                        <div class="custom-checkbox"></div>
                        Blue
                    </label>
                    <!-- White Checkbox -->
                    <input type="checkbox" id="white" @bind-value="@State.Model.Color.White" class="checkbox-input" />
                    <label for="white" class="checkbox-label">
                        <div class="custom-checkbox"></div>
                        White
                    </label>
                    <!-- Red Checkbox -->
                    <input type="checkbox" id="red" @bind-value="@State.Model.Color.Red" class="checkbox-input" />
                    <label for="red" class="checkbox-label">
                        <div class="custom-checkbox"></div>
                        Red
                    </label>
                    <!-- Black Checkbox -->
                    <input type="checkbox" id="black" @bind-value="@State.Model.Color.Black" class="checkbox-input" />
                    <label for="black" class="checkbox-label">
                        <div class="custom-checkbox"></div>
                        Black
                    </label>
                    <!-- Green Checkbox -->
                    <input type="checkbox" id="green" @bind-value="@State.Model.Color.Green" class="checkbox-input" />
                    <label for="green" class="checkbox-label">
                        <div class="custom-checkbox"></div>
                        Green
                    </label>
                    <button id="ColorCheck" @onclick="State.CheckAnswerColor">Send</button>
                </EditForm>
            </div>

            break;

        default:
            State.EndQuiz();
            break;
    }

    @if (State.Result is not null)
    {
        <ShowResult Result="State.Result"/>
        <br/>
        <button type="button" id="Next" @onclick="State.NextCard">Next Question</button>
    }
}

@code {
    [Inject] public IMagicQuizState? State { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await State!.SetQuiz();
        await base.OnInitializedAsync();
    }
}

