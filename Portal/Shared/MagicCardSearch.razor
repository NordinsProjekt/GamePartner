@using Application.MtGCard_Service.Interface;
@using Domain.MtGDomain.DTO;
@using MtGCard_Service.DTO;
@using MtGDomain.DTO;
@inject IMtGCardRepository Repo

<h3>Search for a card</h3>

<input type="text" @bind-value="Text" /> <br />
<SearchTypeFilter Model="@TypeFilterModel" /><br />
<SearchFormatFilter Model="@FormatFilterModel" /> <br />
<button @onclick="SearchCards">Search</button>

@code {
    [Parameter]
    public EventCallback<MtGSearchResultRecord> EventCallback { get; set; }
    public string Text { get; set; }

    private MtGTypeFilter TypeFilterModel { get; set; } = new();
    private MtGFormatFilter FormatFilterModel { get; set; } = new();

    public async void SearchCards()
    {
        var filter = new MtGSearchFilter() {
            Type = TypeFilterModel.ChoosenValue, 
            Format = FormatFilterModel.ChoosenValue 
        };

        var result = await Repo.GetCardsByName(Text, filter);
        var toParent = new MtGSearchResultRecord(result, Text);
        await EventCallback.InvokeAsync(toParent);
    }
}
