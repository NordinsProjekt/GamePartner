@layout MagicBasicLayout
@page "/MagicBasic/Quiz"
@using Application.MtGCard_Service.Interface;
@using MtGCard_Service.Interface;
@using MtGDomain.DTO;
@using MtGDomain.Enum;
@using Portal.Pages.MagicBasic.Components;
@using Domain.MtGDomain.DTO
@using MtGDomain.Enums
@using MtGDomain.Extensions;
@using Portal.DTO
@inject IMtGCardRepository Repo
@inject ICardSetBuffer MtGSetBuffer

<h1>Quiz - Innistrad Edition</h1>
<ScoreBoard Score="@Score" />

@if (GameStart is false)
{
    <p>
        Se namnet på kortet och välj om det kommer från ett creature card,
        enchantment, instant, sorcery eller artefact.
    </p>
    if (Loading is true)
    {
        <p>Loading.......please wait</p>
    }
    else
    {
        <EditForm Model="@model">
            <InputSelect @bind-Value="model.Quiz">
                <option>CMC</option>
                <option>Type</option>
                <option>Color</option>
            </InputSelect>
            <button id="startquiz" @onclick="StartQuiz">Starta Quizet</button>
        </EditForm>
    }
}
else
{
    if (QuizCard is not null)
    {
        @switch (model.Quiz)
        {
            case QuizType.Type:
                <div id="QuizWindowType">
                    <h2>Vilken typ har detta kortet?</h2>
                    <p>Cardname: @QuizCard.Name</p>
                    <button id="Enchantment" @onclick='(() => CheckAnswer("enchantment"))'>Enchantment</button>
                    <button id="Artefact" @onclick='(() => CheckAnswer("artefact"))'>Artefact</button>
                    <button id="Creature" @onclick='(() => CheckAnswer("creature"))'>Creature</button>
                    <button id="Instant" @onclick='(() => CheckAnswer("instant"))'>Instant</button>
                    <button id="Sorcery" @onclick='(() => CheckAnswer("sorcery"))'>Sorcery</button>
                </div>
                break;
            case QuizType.CMC:
                <div id="QuizWindowCMC">
                    <h2>Hur mycket CMC har detta kortet?</h2>
                    <p>Cardname: @QuizCard.Name</p>
                    <EditForm Model="@model">
                            <InputNumber @bind-Value="@model.CmcValue" />
                            <button id="CmcCheck" @onclick="CheckAnswerCmC">Send</button>
                    </EditForm>
                </div>
                break;
            case QuizType.Color:
                <div id="QuizWindowColor">

                </div>
                break;
            default:
                EndQuiz();
                break;
        }
        <ShowResult Result="@Result" />
    }

}

@code {


    Model model = new Model();

    class Model
    {
        public QuizType Quiz { get; set; }
        public int CmcValue { get; set; }
    }
    public InputSelect<string[]> QuizSelector { get; set; } = new();
    public bool GameStart { get; set; } = false;
    public ResultRecord Result { get; set; }
    public List<MtGCardRecordDTO>? List { get; set; }
    public MtGCardRecordDTO? QuizCard { get; set; }
    private int Index { get; set; }
    private int Max { get; set; }
    private bool Loading { get; set; } = false;
    private int Score { get; set; } = 0;
    public string[] selector = new string[] { "Cardtype", "Card CMC", "Card Color" };

    private async void StartQuiz()
    {
        Console.WriteLine(model.Quiz.ToString());
        Score = 0;
        Loading = true;
        var listFromBuffer = MtGSetBuffer.GetSet("DRK");

        if (listFromBuffer is null)
        {
            List = await Repo.GetRandomCardsFromApi("DRK");
            MtGCardSet set = new MtGCardSet(List.ToList(), "The Dark", "DRK");
            MtGSetBuffer.AddSet(set);
        }
        else
        {
            List = listFromBuffer;
        }

        List = FilterList();
        Max = List.Count();
        Index = 0;
        Loading = false;
        SetQuizCard();
    }

    private void CheckAnswerCmC()
    {
        if (QuizCard.Cmc == model.CmcValue)
        {
            Score++;
            Index++;
            Result = new ResultRecord(true, QuizCard.ImageUrl);
            SetQuizCard();
            StateHasChanged();
            return;
        }
        Index++;
        Result = new ResultRecord(false, QuizCard.ImageUrl);
        SetQuizCard();
        StateHasChanged();
    }

    private void CheckAnswer(string text)
    {
        var match = QuizCard.Types.Any(x => x.ToLower().Contains(text));
        if (match)
        {
            Score++;
            Index++;
            Result = new ResultRecord(true, QuizCard.ImageUrl);
            SetQuizCard();
            StateHasChanged();
            return;
        }
        Index++;
        Result = new ResultRecord(false,QuizCard.ImageUrl);
        SetQuizCard();
        StateHasChanged(); 
    }

    private List<MtGCardRecordDTO> FilterList()
    {
        return List.RemoveMtGType(new string[]{ "land","planeswalker","battle"})
            .Shuffle().Take(20).ToList();
    }

    private void SetQuizCard()
    {
        if (Index >= Max)
        {
            EndQuiz();
        }
        QuizCard = List[Index];
        Loading = false;
        GameStart = true;
        StateHasChanged();
    }

    private void EndQuiz()
    {
        model = new();
        List = new();
        QuizCard = null;
        GameStart = false;
        Loading = false;
        StateHasChanged();
        return;
    }
}
