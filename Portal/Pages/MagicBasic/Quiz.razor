@layout MagicBasicLayout
@page "/MagicBasic/Quiz"
@using Application.MtGCard_Service.Interface;
@using MtGCard_Service.Classes;
@using MtGCard_Service.Interface;
@using MtGDomain.DTO;
@using MtGDomain.Enum;
@using Portal.Pages.MagicBasic.Components;
@using Domain.MtGDomain.DTO
@using MtGDomain.Enums
@using MtGDomain.Extensions;
@using Portal.DTO
@inject IMtGCardRepository Repo
@inject ICardSetBuffer Buffer

<h1>Quiz - The Dark Edition</h1>
<ScoreBoard Score="@Score" />

@if (GameStart is false)
{
    <p>
        Se namnet på kortet och välj om det kommer från ett creature card,
        enchantment, instant, sorcery eller artefact.
    </p>
    if (Loading is true)
    {
        <p>Loading.......please wait</p>
    }
    else
    {
        <EditForm Model="@Model">
            <InputSelect @bind-Value="Model.Quiz">
                <option>CMC</option>
                <option>Type</option>
                <option>Color</option>
            </InputSelect>
            <button id="startquiz" @onclick="StartQuiz">Starta Quizet</button>
        </EditForm>
    }
}
else
{
    if (QuizCard is not null)
    {
        @switch (Model.Quiz)
        {
            case QuizType.Type:
                <div id="QuizWindowType">
                    <h2>Vilken typ har detta kortet? @(Index+1) / @List.Count</h2>
                    <p>Cardname: @QuizCard.Name</p>
                    <button id="Enchantment" @onclick='(() => CheckAnswer("enchantment"))'>Enchantment</button>
                    <button id="Artefact" @onclick='(() => CheckAnswer("artefact"))'>Artifact</button>
                    <button id="Creature" @onclick='(() => CheckAnswer("creature"))'>Creature</button>
                    <button id="Instant" @onclick='(() => CheckAnswer("instant"))'>Instant</button>
                    <button id="Sorcery" @onclick='(() => CheckAnswer("sorcery"))'>Sorcery</button>
                </div>
                break;
            case QuizType.CMC:
                <div id="QuizWindowCMC">
                    <h2>Hur mycket CMC har detta kortet? @(Index + 1) / @List.Count</h2>
                    <p>Cardname: @QuizCard.Name</p>
                    <EditForm Model="@Model">
                            <InputNumber @bind-Value="@Model.CmcValue" id="inputCmc" />
                            <button id="CmcCheck" @onclick="CheckAnswerCmC">Send</button>
                    </EditForm>
                </div>
                break;
            case QuizType.Color:
                <div id="QuizWindowColor">
                    <h2>Vilken/Vilka färger har kortet? @(Index + 1) / @List.Count</h2>
                    <p>Cardname: @QuizCard.Name</p>
                    <EditForm Model="@Model">
                       <label for="blue">Blue</label><InputCheckbox DisplayName="Blue" @bind-Value="@Model.Color.Blue" type="checkbox" id="blue" /> |
                        <label for="white">White</label><InputCheckbox DisplayName="White" @bind-Value="@Model.Color.White" type="checkbox" id="white" /> |
                        <label for="red">Red</label><InputCheckbox DisplayName="Red" @bind-Value="@Model.Color.Red" type="checkbox" id="red" /> |
                        <label for="black">Black</label><InputCheckbox DisplayName="Black" @bind-Value="@Model.Color.Black" type="checkbox" id="black" /> |
                        <label for="green">Green</label><InputCheckbox DisplayName="Green" @bind-Value="@Model.Color.Green" type="checkbox" id="green" />
                        <button id="ColorCheck" @onclick="CheckAnswerColor">Send</button>
                    </EditForm>
                    
                </div>
                break;
            default:
                EndQuiz();
                break;
        }
        <ShowResult Result="@Result" />
    }

}

@code {
    public MtGQuizModel Model = new MtGQuizModel();

    public bool GameStart { get; set; } = false;
    public ResultRecord Result { get; set; }
    public List<MtGCardRecordDTO>? List { get; set; }
    public MtGCardRecordDTO? QuizCard { get; set; }
    private int Index { get; set; } = 0;
    private int Max { get; set; } = 0;
    private bool Loading { get; set; } = false;
    private int Score { get; set; } = 0;
    public string[] selector = new string[] { "Cardtype", "Card CMC", "Card Color" };

    protected override async Task OnInitializedAsync()
    {
        await PopulateBuffer();
    }

    private async void StartQuiz()
    {
        Score = 0;
        Loading = true;
        var cards = await GetCards();
        List = FilterList(cards);
        List = List.Shuffle().Take(20).ToList();
        Max = List.Count();
        Index = 0;
        Loading = false;
        SetQuizCard();
    }

    private async Task<List<MtGCardRecordDTO>> GetCards()
    {
        List<MtGCardRecordDTO>? cardsFromBuffer = Buffer.GetSet("DRK");
        return cardsFromBuffer;
    }

    private async Task PopulateBuffer()
    {
        List<(string Name, string Code)> Sets = new() {
            ( "The Dark", "DRK" ),
            ("Dark Ascension","DKA"),
            ("Innistrad","ISD")
        };
        foreach (var set in Sets)
        {
            if(! Buffer.DoesSetExist(set.Code))
            {
                var cardsFromAPI = await Repo.GetAllCardsFromASet(set.Code);
                Buffer.AddSet(new MtGCardSet(cardsFromAPI, set.Name, set.Code));
            }
        }
    }


    private void CheckAnswerColor()
    {
        //TODO Lägg color kollen innan manacostnaden
        if(QuizCard.ManaCost.Contains("W"))
        {
            if (Model.Color.White is not true)
            {
                Result = new ResultRecord(false, QuizCard.ImageUrl);
                Index++;
                SetQuizCard();
                return;
            }    
        }

        if (QuizCard.ManaCost.Contains("B"))
        {
            if (Model.Color.Black is not true)
            {
                Result = new ResultRecord(false, QuizCard.ImageUrl);
                Index++;
                SetQuizCard();
                return;
            }
        }

        if (QuizCard.ManaCost.Contains("U"))
        {
            if (Model.Color.Blue is not true)
            {
                Result = new ResultRecord(false, QuizCard.ImageUrl);
                Index++;
                SetQuizCard();
                return;
            }
        }

        if (QuizCard.ManaCost.Contains("R"))
        {
            if (Model.Color.Red is not true)
            {
                Result = new ResultRecord(false, QuizCard.ImageUrl);
                Index++;
                SetQuizCard();
                return;
            }
        }

        if (QuizCard.ManaCost.Contains("G"))
        {
            if (Model.Color.Green is not true)
            {
                Result = new ResultRecord(false, QuizCard.ImageUrl);
                Index++;
                SetQuizCard();
                return;
            }
        }

        if (QuizCard.IsColorLess)
        {
            if (Model.Color.Black || Model.Color.Green || Model.Color.Red || Model.Color.Blue || Model.Color.White)
            {
                Result = new ResultRecord(false, QuizCard.ImageUrl);
                Index++;
                SetQuizCard();
                return;
            }
        }
        Score++;
        Index++;
        Result = new ResultRecord(true, QuizCard.ImageUrl);
        SetQuizCard();
    }

    private void CheckAnswerCmC()
    {
        if (QuizCard.Cmc == Model.CmcValue)
        {
            Score++;
            Index++;
            Result = new ResultRecord(true, QuizCard.ImageUrl);
            SetQuizCard();
            return;
        }
        Index++;
        Result = new ResultRecord(false, QuizCard.ImageUrl);
        SetQuizCard();
    }

    private void CheckAnswer(string text)
    {
        var match = QuizCard.Types.Any(x => x.ToLower().Contains(text));
        if (match)
        {
            Score++;
            Index++;
            Result = new ResultRecord(true, QuizCard.ImageUrl);
            SetQuizCard();
            return;
        }
        Index++;
        Result = new ResultRecord(false,QuizCard.ImageUrl);
        SetQuizCard();
    }

    private List<MtGCardRecordDTO> FilterList(List<MtGCardRecordDTO> cards)
    {
        return cards.RemoveMtGType(new string[] { "land", "planeswalker", "battle" });
    }

    private void SetQuizCard()
    {
        if (Index > Max)
        {
            EndQuiz();
        }
        QuizCard = List[Index];
        Loading = false;
        GameStart = true;
        StateHasChanged();
    }

    private void EndQuiz()
    {
        Model = new();
        List = new();
        QuizCard = null;
        GameStart = false;
        Loading = false;
        StateHasChanged();
        return;
    }
}
